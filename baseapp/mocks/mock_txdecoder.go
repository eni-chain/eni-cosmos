// Code generated by MockGen. DO NOT EDIT.
// Source: txs_group.go

// Package mocks is a generated GoMock package.
package mocks

import (
	sdk "github.com/cosmos/cosmos-sdk/types"
	"github.com/golang/mock/gomock"
	"google.golang.org/protobuf/proto"
	"reflect"

	"github.com/ethereum/go-ethereum/common"
)

// This file was generated by MockGen. DO NOT EDIT.

// MockTxDecoder is a mock of TxDecoder interface.
type MockTxDecoder struct {
	ctrl     *gomock.Controller
	recorder *MockTxDecoderRecorder
}

// MockTxDecoderRecorder is the mock recorder for MockTxDecoder.
type MockTxDecoderRecorder struct {
	mock *MockTxDecoder
}

// NewMockTxDecoder creates a new mock instance.
func NewMockTxDecoder(ctrl *gomock.Controller) *MockTxDecoder {
	mock := &MockTxDecoder{ctrl: ctrl}
	mock.recorder = &MockTxDecoderRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTxDecoder) EXPECT() *MockTxDecoderRecorder {
	return m.recorder
}

// Decode mocks base method.
func (m *MockTxDecoder) Decode(txBytes []byte) (sdk.Tx, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Decode", txBytes)
	ret0, _ := ret[0].(sdk.Tx)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Decode indicates an expected call of Decode.
func (mr *MockTxDecoderRecorder) Decode(txBytes interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	methodType := reflect.TypeOf((*MockTxDecoder)(nil).Decode)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Decode", methodType, txBytes)
}

// MockTx is a mock of Tx interface.
type MockTx struct {
	ctrl     *gomock.Controller
	recorder *MockTxRecorder
}

func (m *MockTx) GetMsgsV2() ([]proto.Message, error) {
	//TODO implement me
	panic("implement me")
}

// MockTxRecorder is the mock recorder for MockTx.
type MockTxRecorder struct {
	mock *MockTx
}

// NewMockTx creates a new mock instance.
func NewMockTx(ctrl *gomock.Controller) *MockTx {
	mock := &MockTx{ctrl: ctrl}
	mock.recorder = &MockTxRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTx) EXPECT() *MockTxRecorder {
	return m.recorder
}

// GetMsgs mocks base method.
func (m *MockTx) GetMsgs() []sdk.Msg {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMsgs")
	ret0, _ := ret[0].([]sdk.Msg)
	return ret0
}

// GetMsgs indicates an expected call of GetMsgs.
func (mr *MockTxRecorder) GetMsgs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	methodType := reflect.TypeOf((*MockTxRecorder)(nil).GetMsgs())
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMsgs", methodType)
}

// MockMsgEVMTransaction is a mock of MsgEVMTransaction interface.
type MockMsgEVMTransaction struct {
	ctrl     *gomock.Controller
	recorder *MockMsgEVMTransactionRecorder
}

func (m *MockMsgEVMTransaction) Reset() {
	//TODO implement me
	panic("implement me")
}

func (m *MockMsgEVMTransaction) String() string {
	//TODO implement me
	panic("implement me")
}

func (m *MockMsgEVMTransaction) ProtoMessage() {
	//TODO implement me
	panic("implement me")
}

// MockMsgEVMTransactionRecorder is the mock recorder for MockMsgEVMTransaction.
type MockMsgEVMTransactionRecorder struct {
	mock *MockMsgEVMTransaction
}

// NewMockMsgEVMTransaction creates a new mock instance.
func NewMockMsgEVMTransaction(ctrl *gomock.Controller) *MockMsgEVMTransaction {
	mock := &MockMsgEVMTransaction{ctrl: ctrl}
	mock.recorder = &MockMsgEVMTransactionRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMsgEVMTransaction) EXPECT() *MockMsgEVMTransactionRecorder {
	return m.recorder
}

// GetEvmSender mocks base method.
func (m *MockMsgEVMTransaction) GetEvmSender() (common.Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEvmSender")
	ret0, _ := ret[0].(common.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEvmSender indicates an expected call of GetEvmSender.
func (mr *MockMsgEVMTransactionRecorder) GetEvmSender() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	methodType := reflect.TypeOf((*MockMsgEVMTransactionRecorder)(nil).GetEvmSender())
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEvmSender", methodType)
}

// GetCachedValue mocks base method.
func (m *MockMsgEVMTransaction) GetCachedValue() interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCachedValue")
	ret0 := ret[0]
	return ret0
}

// GetCachedValue indicates an expected call of GetCachedValue.
func (mr *MockMsgEVMTransactionRecorder) GetCachedValue() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	methodType := reflect.TypeOf((*MockMsgEVMTransactionRecorder)(nil).GetCachedValue())
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCachedValue", methodType)
}
