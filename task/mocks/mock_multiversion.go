// Code generated by MockGen. DO NOT EDIT.
// Source: store/multiversion/store.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	multiversion "cosmossdk.io/store/multiversion"
	occ "cosmossdk.io/store/multiversion/occ"
	db "github.com/cometbft/cometbft-db"
	gomock "github.com/golang/mock/gomock"
)

// MockMultiVersionStore is a mock of MultiVersionStore interface.
type MockMultiVersionStore struct {
	ctrl     *gomock.Controller
	recorder *MockMultiVersionStoreMockRecorder
}

// MockMultiVersionStoreMockRecorder is the mock recorder for MockMultiVersionStore.
type MockMultiVersionStoreMockRecorder struct {
	mock *MockMultiVersionStore
}

// NewMockMultiVersionStore creates a new mock instance.
func NewMockMultiVersionStore(ctrl *gomock.Controller) *MockMultiVersionStore {
	mock := &MockMultiVersionStore{ctrl: ctrl}
	mock.recorder = &MockMultiVersionStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMultiVersionStore) EXPECT() *MockMultiVersionStoreMockRecorder {
	return m.recorder
}

// ClearIterateset mocks base method.
func (m *MockMultiVersionStore) ClearIterateset(index int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ClearIterateset", index)
}

// ClearIterateset indicates an expected call of ClearIterateset.
func (mr *MockMultiVersionStoreMockRecorder) ClearIterateset(index interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearIterateset", reflect.TypeOf((*MockMultiVersionStore)(nil).ClearIterateset), index)
}

// ClearReadset mocks base method.
func (m *MockMultiVersionStore) ClearReadset(index int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ClearReadset", index)
}

// ClearReadset indicates an expected call of ClearReadset.
func (mr *MockMultiVersionStoreMockRecorder) ClearReadset(index interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearReadset", reflect.TypeOf((*MockMultiVersionStore)(nil).ClearReadset), index)
}

// CollectIteratorItems mocks base method.
func (m *MockMultiVersionStore) CollectIteratorItems(index int) *db.MemDB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CollectIteratorItems", index)
	ret0, _ := ret[0].(*db.MemDB)
	return ret0
}

// CollectIteratorItems indicates an expected call of CollectIteratorItems.
func (mr *MockMultiVersionStoreMockRecorder) CollectIteratorItems(index interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CollectIteratorItems", reflect.TypeOf((*MockMultiVersionStore)(nil).CollectIteratorItems), index)
}

// GetAllWritesetKeys mocks base method.
func (m *MockMultiVersionStore) GetAllWritesetKeys() map[int][]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllWritesetKeys")
	ret0, _ := ret[0].(map[int][]string)
	return ret0
}

// GetAllWritesetKeys indicates an expected call of GetAllWritesetKeys.
func (mr *MockMultiVersionStoreMockRecorder) GetAllWritesetKeys() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllWritesetKeys", reflect.TypeOf((*MockMultiVersionStore)(nil).GetAllWritesetKeys))
}

// GetIterateset mocks base method.
func (m *MockMultiVersionStore) GetIterateset(index int) multiversion.Iterateset {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIterateset", index)
	ret0, _ := ret[0].(multiversion.Iterateset)
	return ret0
}

// GetIterateset indicates an expected call of GetIterateset.
func (mr *MockMultiVersionStoreMockRecorder) GetIterateset(index interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIterateset", reflect.TypeOf((*MockMultiVersionStore)(nil).GetIterateset), index)
}

// GetLatest mocks base method.
func (m *MockMultiVersionStore) GetLatest(key []byte) multiversion.MultiVersionValueItem {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatest", key)
	ret0, _ := ret[0].(multiversion.MultiVersionValueItem)
	return ret0
}

// GetLatest indicates an expected call of GetLatest.
func (mr *MockMultiVersionStoreMockRecorder) GetLatest(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatest", reflect.TypeOf((*MockMultiVersionStore)(nil).GetLatest), key)
}

// GetLatestBeforeIndex mocks base method.
func (m *MockMultiVersionStore) GetLatestBeforeIndex(index int, key []byte) multiversion.MultiVersionValueItem {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestBeforeIndex", index, key)
	ret0, _ := ret[0].(multiversion.MultiVersionValueItem)
	return ret0
}

// GetLatestBeforeIndex indicates an expected call of GetLatestBeforeIndex.
func (mr *MockMultiVersionStoreMockRecorder) GetLatestBeforeIndex(index, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestBeforeIndex", reflect.TypeOf((*MockMultiVersionStore)(nil).GetLatestBeforeIndex), index, key)
}

// GetReadset mocks base method.
func (m *MockMultiVersionStore) GetReadset(index int) multiversion.ReadSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReadset", index)
	ret0, _ := ret[0].(multiversion.ReadSet)
	return ret0
}

// GetReadset indicates an expected call of GetReadset.
func (mr *MockMultiVersionStoreMockRecorder) GetReadset(index interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReadset", reflect.TypeOf((*MockMultiVersionStore)(nil).GetReadset), index)
}

// Has mocks base method.
func (m *MockMultiVersionStore) Has(index int, key []byte) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Has", index, key)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Has indicates an expected call of Has.
func (mr *MockMultiVersionStoreMockRecorder) Has(index, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Has", reflect.TypeOf((*MockMultiVersionStore)(nil).Has), index, key)
}

// InvalidateWriteset mocks base method.
func (m *MockMultiVersionStore) InvalidateWriteset(index, incarnation int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "InvalidateWriteset", index, incarnation)
}

// InvalidateWriteset indicates an expected call of InvalidateWriteset.
func (mr *MockMultiVersionStoreMockRecorder) InvalidateWriteset(index, incarnation interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InvalidateWriteset", reflect.TypeOf((*MockMultiVersionStore)(nil).InvalidateWriteset), index, incarnation)
}

// SetEstimatedWriteset mocks base method.
func (m *MockMultiVersionStore) SetEstimatedWriteset(index, incarnation int, writeset multiversion.WriteSet) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetEstimatedWriteset", index, incarnation, writeset)
}

// SetEstimatedWriteset indicates an expected call of SetEstimatedWriteset.
func (mr *MockMultiVersionStoreMockRecorder) SetEstimatedWriteset(index, incarnation, writeset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetEstimatedWriteset", reflect.TypeOf((*MockMultiVersionStore)(nil).SetEstimatedWriteset), index, incarnation, writeset)
}

// SetIterateset mocks base method.
func (m *MockMultiVersionStore) SetIterateset(index int, iterateset multiversion.Iterateset) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetIterateset", index, iterateset)
}

// SetIterateset indicates an expected call of SetIterateset.
func (mr *MockMultiVersionStoreMockRecorder) SetIterateset(index, iterateset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetIterateset", reflect.TypeOf((*MockMultiVersionStore)(nil).SetIterateset), index, iterateset)
}

// SetReadset mocks base method.
func (m *MockMultiVersionStore) SetReadset(index int, readset multiversion.ReadSet) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetReadset", index, readset)
}

// SetReadset indicates an expected call of SetReadset.
func (mr *MockMultiVersionStoreMockRecorder) SetReadset(index, readset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetReadset", reflect.TypeOf((*MockMultiVersionStore)(nil).SetReadset), index, readset)
}

// SetWriteset mocks base method.
func (m *MockMultiVersionStore) SetWriteset(index, incarnation int, writeset multiversion.WriteSet) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetWriteset", index, incarnation, writeset)
}

// SetWriteset indicates an expected call of SetWriteset.
func (mr *MockMultiVersionStoreMockRecorder) SetWriteset(index, incarnation, writeset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetWriteset", reflect.TypeOf((*MockMultiVersionStore)(nil).SetWriteset), index, incarnation, writeset)
}

// ValidateTransactionState mocks base method.
func (m *MockMultiVersionStore) ValidateTransactionState(index int) (bool, []int) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateTransactionState", index)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].([]int)
	return ret0, ret1
}

// ValidateTransactionState indicates an expected call of ValidateTransactionState.
func (mr *MockMultiVersionStoreMockRecorder) ValidateTransactionState(index interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateTransactionState", reflect.TypeOf((*MockMultiVersionStore)(nil).ValidateTransactionState), index)
}

// VersionedIndexedStore mocks base method.
func (m *MockMultiVersionStore) VersionedIndexedStore(index, incarnation int, abortChannel chan occ.Abort) *multiversion.VersionIndexedStore {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VersionedIndexedStore", index, incarnation, abortChannel)
	ret0, _ := ret[0].(*multiversion.VersionIndexedStore)
	return ret0
}

// VersionedIndexedStore indicates an expected call of VersionedIndexedStore.
func (mr *MockMultiVersionStoreMockRecorder) VersionedIndexedStore(index, incarnation, abortChannel interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VersionedIndexedStore", reflect.TypeOf((*MockMultiVersionStore)(nil).VersionedIndexedStore), index, incarnation, abortChannel)
}

// WriteLatestToStore mocks base method.
func (m *MockMultiVersionStore) WriteLatestToStore() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "WriteLatestToStore")
}

// WriteLatestToStore indicates an expected call of WriteLatestToStore.
func (mr *MockMultiVersionStoreMockRecorder) WriteLatestToStore() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteLatestToStore", reflect.TypeOf((*MockMultiVersionStore)(nil).WriteLatestToStore))
}
